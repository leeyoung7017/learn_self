信号相当于软中断；信号的响应依赖于中断机制。

core段错误 ulimit

信号无优先级；
1~31：非实时信号，发送信号可能会丢失；
		不支持信号排队
34~64：实时信号
		支持信号排队，发送的多个实时信号都会被接受
							usr/include/bits/signum.h 记录了相关的非实时信号；
							
							

sighup(进程挂起)	sigint(进程中断)	sigquit		sigkill 	sigsegv(段错误产生) 	sigstop(进程暂停)	 sigcont(进程继续)...


信号来源：硬件来源(设备按键，故障)，
		  软件来源--->发送信号的系统函数	
	    kill(pid,sig)
				pid为0，则向每一个进程传递信号；pid为-1.则error；pid为某进程进程号，则向该进程传递信号
		raise(sig)	
				给自己传递信号，<-->kill(getpid(), sig);	returns 0 on success, and nonzero for failure
		alarm(uint seconds)	
				
		pause(void)
				wait for signal;the calling process (or thread) to sleep until a signal is delivered
				
			
信号处理：	忽略信号：		对信号不进行任何操作（sigkill和sigstop永远不能被忽略）：忽略硬件异常，进程启动时suguser1和siguser2被忽略
			
			执行默认操作：	每个非实时信号都会有默认操作，大部分的默认操作为终止进程（+core文件返回）sigkill sigstop只能执行默认操作
			
			捕获信号：		告诉内核，信号出现时调用自己写的处理函数	（sigkill和sigstop永远不能被捕获）

捕获信号操作函数

从哪里捕获信号？	
			
			通过软中断或硬件中断发送请求，要求内核向指定进程发送信号，进程受到信号向内核请求处理，是自处理还是默认处理





signal函数：向内核登记信号处理函数 	第一参数为信号名；第二参数为func、SIG_IGN(忽略信号)、SIG_DFL(默认操作)
	信号会打断阻塞系统调用
	
sigaction函数

信号量集：多进程中获取信号；

信号集合：就是在进程中获取多个信号的多种不同操作；


	